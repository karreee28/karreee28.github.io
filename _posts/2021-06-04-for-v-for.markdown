---
layout: post
title:  "for, v-for 관련"
date:   2021-06-04 00:00:00 +0900
categories: study
tags: [javascript, vue.js]
---
### v-for 기초(리스트)

##### //레이아웃
```html
<ul>
  <li v-for="item in items" :key="item.user_id">
    <p> item.user_name </p>
    <p> item.tel1 </p>
  </li>
</ul>
```
여기서 'item'은 무슨 이름이어도 상관 없음('items' 배열의 항목 이름을 정의) <br>
key는 각 item의 데이터 중 고유한 값을 가져와야함. 

##### //데이터
```javascript
items: [
  {
    user_id: 40,
    user_name: 'Dickerson',
    tel1: '010-000-0030'
  },
  {
    user_id: 41,
    user_name: 'John Doe',
    tel1: '010-000-0030'
  }
]
```

### v-for 활용(ex. 멤버 추가/수정)

##### //레이아웃(수정)
```html
<!-- 수정일 경우 예시 레이아웃 -->
<div class="edit" v-for="pet in pets" :key="pet.pet_id">
  <!-- 배열을 for문으로 돌림 -->
  <el-button size="small" class="submit-btn" @click="putPet">저장</el-button>
  <el-row class="form-row">
    <el-col class="form-col">
      <div class="form-label">구분</div>
      <div class="form-cont">
        <el-radio-group v-model="pet.type">
          <el-radio-button label="강아지"></el-radio-button>
          <el-radio-button label="고양이"></el-radio-button>
        </el-radio-group>
      </div>
    </el-col>
  </el-row>
  <el-row class="form-row">
    <el-col :span="12" :xs="24" class="form-col">
      <div class="form-label">이름</div>
      <div class="form-cont">
        <el-input v-model="pet.pet_name"></el-input>
      </div>
    </el-col>
    <el-col :span="12" :xs="24" class="form-col pet-age">
      <div class="form-label">나이</div>
      <div class="form-cont">
        <el-input v-model="pet.age_y"></el-input>
        <span>년</span>
        <el-input v-model="pet.age_m"></el-input>
        <span>개월</span>
      </div>
    </el-col>
  </el-row>
  <el-row class="form-row">
    <el-col :span="12" :xs="24" class="form-col">
      <div class="form-label">품종</div>
      <div class="form-cont">
        <el-input placeholder="Please input" v-model="pet.kind_name">
          <template slot="append">
            <el-button @click="modalOpen(pet, index)">선택하기</el-button>
          </template>
        </el-input>
      </div>
    </el-col>
    <el-col :span="12" :xs="24" class="form-col">
      <div class="form-label">성별</div>
      <div class="form-cont">
        <el-radio-group v-model="pet.sex">
          <el-radio-button label="남"></el-radio-button>
          <el-radio-button label="여"></el-radio-button>
        </el-radio-group>
      </div>
    </el-col>
  </el-row>
  <el-row class="form-row">
    <el-col :span="12" :xs="24" class="form-col">
      <div class="form-label">몸무게</div>
      <div class="form-cont">
        <el-input v-model="pet.weight"></el-input>
      </div>
    </el-col>
    <el-col :span="12" :xs="24" class="form-col">
      <div class="form-label">중성화</div>
      <div class="form-cont">
        <el-switch
          v-model="pet.de_sexing"
          active-text="중성"
          inactive-text="중성 아님">
        </el-switch>
      </div>
    </el-col>
  </el-row>
  <el-row class="form-row">
    <div class="form-label">메모</div>
    <div class="form-cont">
      <el-input type="textarea" v-model="pet.memo"></el-input>
    </div>
  </el-row>
</div>
```

##### //레이아웃(추가)

```html
<!--추가일 경우 예시 레이아웃-->  
<el-button size="small" @click="addPet">반려동물추가</el-button>
<div class="add" v-for="(pet, index) in newPets" :key="index">
  <!-- 배열을 for문으로 돌림 / 각 pet에 index를 부여 -->
  <el-button size="small" class="submit-btn" @click="postPet(pet)">저장</el-button>
  <el-row class="form-row">
    <el-col class="form-col">
      <div class="form-label">구분</div>
      <div class="form-cont">
        <el-radio-group v-model="pet.type">
          <el-radio-button label="강아지"></el-radio-button>
          <el-radio-button label="고양이"></el-radio-button>
        </el-radio-group>
      </div>
    </el-col>
  </el-row>
  <el-row class="form-row">
    <el-col :span="12" :xs="24" class="form-col">
      <div class="form-label">이름</div>
      <div class="form-cont">
        <el-input v-model="pet.pet_name"></el-input>
      </div>
    </el-col>
    <el-col :span="12" :xs="24" class="form-col pet-age">
      <div class="form-label">나이</div>
      <div class="form-cont">
        <el-input v-model="pet.age_y"></el-input>
        <span>년</span>
        <el-input v-model="pet.age_m"></el-input>
        <span>개월</span>
      </div>
    </el-col>
  </el-row>
  <el-row class="form-row">
    <el-col :span="12" :xs="24" class="form-col">
      <div class="form-label">품종</div>
      <div class="form-cont">
        <el-input placeholder="Please input" v-model="pet.kind_name">
          <template slot="append">
            <el-button @click="modalOpen(pet, index)">선택하기</el-button>
          </template>
        </el-input>
      </div>
    </el-col>
    <el-col :span="12" :xs="24" class="form-col">
      <div class="form-label">성별</div>
      <div class="form-cont">
        <el-radio-group v-model="pet.sex">
          <el-radio-button label="남"></el-radio-button>
          <el-radio-button label="여"></el-radio-button>
        </el-radio-group>
      </div>
    </el-col>
  </el-row>
  <el-row class="form-row">
    <el-col :span="12" :xs="24" class="form-col">
      <div class="form-label">몸무게</div>
      <div class="form-cont">
        <el-input v-model="pet.weight"></el-input>
      </div>
    </el-col>
    <el-col :span="12" :xs="24" class="form-col">
      <div class="form-label">중성화</div>
      <div class="form-cont">
        <el-switch
          v-model="pet.de_sexing"
          active-text="중성"
          inactive-text="중성 아님">
        </el-switch>
      </div>
    </el-col>
  </el-row>
  <el-row class="form-row">
    <el-col class="form-col">
      <div class="form-label">메모</div>
      <div class="form-cont">
        <el-input type="textarea" v-model="pet.memo">
        </el-input>
      </div>
    </el-col>
  </el-row>
</div>
```
저장버튼(putPet)을 누르면 입력 되어있는 데이터를 API로 저장 <br>
추가버튼(addPet)을 누르면 새로운 폼을 for문을 통해 생성

##### //데이터
```javascript
data() {
  return {
    pets: [], 
    newPets: []
  }
},
```
빈 배열을 데이터에 정의(method에서 넣어줌)

##### //함수

```javascript
methods: {
  putPet: async function() {
    // API로 데이터 put (보통 기존 데이터 수정 시 사용)
  },
  postPet: async function(item) {
    // API로 데이터 post (데이터 추가 시 사용)
  },
  getList: async function() {
    // API로 데이터 get. 아래 배열은 임시 데이터. 
    let rs = [
      {
        pet_id: 1,
        type: '강아지',
        pet_name: '삼월이',
        age_y: '6',
        age_m: '3',
        kind_name: '포메라니안',
        sex: '남',
        weight: '3.5kg',
        de_sexing: true,
        memo: '건조한 음성에 화를 내는 편'
      },
      {
        pet_id: 2,
        type: '고양이',
        pet_name: '사월이',
        age_y: '2',
        age_m: '3',
        kind_name: '메인쿤',
        sex: '남',
        weight: '16.2kg',
        de_sexing: true,
        memo: '천천히 상냥히 정리하면 얌전하다'
      }
    ]
    this.pets = rs;
  },
  addPet: function() {
    // 데이터 추가 일 경우 사용
    this.newPets.push(
      {
        type: '강아지',
        pet_name: '',
        age_y: '',
        age_m: '',
        kind_name: '',
        sex: '',
        weight: '',
        de_sexing: true,
        memo: ''
      }
    )
  }
}

```
for문을 돌릴 배열과 API로드 시 필요한 함수를 methods에 정의


### 이중for문 예시(for문 안에 for문)
- 구조 <br>
  큰 리스트를 for문으로 돌리고, 각각이 가진 리스트를 for문으로 또 돌림. <br>
  큰 리스트 클릭 시, 각각의 리스트가 펼쳐짐 (그래서 각 데이터 배열에 isOpen이라는 boolean값을 둠) <br>
  각각의 리스트에는 리스트에 추가할 수 있는 항목이 있음(이건 for문 안돌림 - 방식은 동일)

##### //레이아웃
```html
<ul class="option-list">
  <!-- items 데이터 배열의 item 이라는 이름으로 항목들을 정의 -->
  <li class="option-item" v-for="w_item in items" :key="w_item.id"> 
    <!-- 해당 레이어 클릭 시 option-detail이 펼쳐짐(v-if 달아둠) -->
    <div class="option-btn clear" @click="w_item.isOpen = !w_item.isOpen">
      <p class="txt">{{ w_item.txt }}</p>
      <div class="ico">
        <i class="el-icon-arrow-down" v-if="!w_item.isOpen"></i> 
        <i class="el-icon-arrow-up" v-else></i>
      </div>
    </div>
    <el-collapse-transition>
      <div class="option-detail" v-if="w_item.isOpen">
        <div class="inner">
          <!-- 2중for문. items 데이터 배열에서 item 으로 정의한 항목 중, list라는 배열에서 item 이라는 이름으로 항목을 정의 -->
          <el-row class="option-detail-item" v-for="item in w_item.list" :key="item.id">
            <div class="btn-wrap">
              <el-button size="mini" @click="addItemNew(item)">추가</el-button>
            </div>
            <el-col :span="10" class="txt">
              {{ item.txt }}
            </el-col>
            <el-col :span="6" class="switch">
              <el-switch
                v-model="item.onOff"
                active-text="옵션 사용">
              </el-switch>
            </el-col>
            <el-col :span="8" class="price-input">
              <span>기본 가격</span>
              <el-input
                size="mini"
                placeholder="Please Input"
                v-model="item.price">
              </el-input>
              <span>원</span>
            </el-col>
          </el-row>
        </div>
      </div>
    </el-collapse-transition>
  </li>
</ul>
```

##### //데이터
```javascript
data() {
  return {
    openDetail: false,
    openIndex: 0,
    items: []
  }
},
```

##### //함수
```javascript
mounted: async function(){
    this.getList();
  },
  methods: {
    getList: async function(){
      //items 배열 안에 list라는 배열을 넣어 2중for문 완성
      this.items = [
        {
          id: 1,
          txt: '털길이 옵션',
          isOpen: false,
          list: [
            {
              id: 1,
              txt: '3mm',
              onOff: true,
              price: '5,000'
            },
            {
              id: 2,
              txt: '5mm',
              onOff: true,
              price: '5,000'
            }
          ]
        },
        {
          id: 2,
          txt: '얼굴스타일 옵션',
          isOpen: false,
          list: [
            {
              id: 1,
              txt: '전체컷',
              onOff: true,
              price: '5,000'
            },
            {
              id: 2,
              txt: '알머리',
              onOff: true,
              price: '5,000'
            },
            {
              id: 3,
              txt: '크라운',
              onOff: true,
              price: '5,000'
            },
            {
              id: 4,
              txt: '무스타슈',
              onOff: true,
              price: '5,000'
            }
          ]
        }
      ]
    },
    //push로 새로운 아이템을 넣으려면
    addItemNew: function(item){
      item.list.push(
        {
          txt: '',
          onOff: true,
          price: ''      
        }
      )
    }
  }
}
```


- 추가 및 삭제 되어야 하는 데이터가 배열안의 배열 일 경우, 위의 방법처럼 item을 불러와 넣는 것 보다는 


##### //레이아웃
```html
<el-col :span="8" class="weight-category" v-for="(w_item, index) in weight_obj" :key="w_item.breed_id">
  <div class="category-title">{{ w_item.breed_name }}</div>
    <div class="weight-list">
    <ul>
      <li v-for="(item, index) in w_item.list" :key="item.id">
        <el-input size="mini" v-model="item.val" class="weight-input"></el-input>
        <el-button size="mini" @click="removeWeightList(w_item.list, index)"  icon="el-icon-delete" class="delete-btn"></el-button>
      </li>
    </ul>
    <div class="btn-wrap">
      <el-button size="mini" @click="addWeightList(w_item.list)">추가</el-button>
    </div>
  </div>
</el-col>
```

이러한 구조에서 @click="removeWeightList(w_item.list)"로 값을 던지고, (괄호 안에 있는 것을 던져준다) <br>
하단 메소드에서

##### //함수
```javascript
addWeightList: function(array) {
  array.push(
    {
      id: ++this.weight_dummy_id,
      val: '',
      standard: 2,
      is_add: true,
      val_option: [
        {
          value: 1,
          label: '미만'
        },
        {
          value: 2,
          label: '이상'
        }
      ]
    }
  )
},
removeWeightList: function(array, index) {
  array.splice(index, 1)
}
```
위에서 w_item.list라는 배열을 던졌으니까 array로 받아서 넣어준다. <br>
addWeightList 함수에서 push로 배열을 추가하고, <br>
removeWeightList 함수처럼 splice로 삭제도 가능하다. <br>
<br>
splice의 경우에는 몇 번째 배열인 지 알아야 하기 때문에 index도 같이 받아와 넣어줬다.